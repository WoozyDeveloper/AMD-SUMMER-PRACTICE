`timescale 1ns/1ps

module BINARY_CALC(input INPUT_KEY,
                   input VALID_CMD,
                   input RW_MEM,
                   input [7:0] ADDR,
                   input [7:0] IN_A,
                   input [7:0] IN_B,
                   input [3:0] SEL,
                   input CONFIG_DIV,
                   input [31:0] D_IN,
                   input RESET,
                   input CLK,
                  output CALC_ACTIVE,
                  output CALC_MODE,
                  output BUSY,
                  output D_OUT_VALID,
                  output D_OUT,
                  output CLK_TX);
  
  wire [7:0] A_WIRE;
  wire [7:0] B_WIRE;
  wire [3:0] SELECT_WIRE;
  
  
  wire [7:0] ALU_OUT_TMP;
  wire [3:0] FLAG_TMP;
  wire [31:0] BUFFER_OUT;
  wire [31:0] MUX_BM_RES;
  wire CTRL_RW_MEM,CTRL_ACCESS_MEM;
  wire [31:0] D_OUT_MEM;
  wire [31:0] DIN;
  wire CONFIG_DIV;
  wire CTRL_SAMPLE_DATA;//PARALEL_DATA
  wire CTRL_TRANSFER_DATA;//START_TX
  wire DATAOUT_VLD;
  wire DOUT;
  
  
  wire RESET_TMP, RW_WIRE, CTRL_ACTIVE;
  wire CTRL_MODE, TRANSFER_DONE;
  
  assign RESET_TMP = !CTRL_ACTIVE & RESET;
  assign RW_WIRE = CTRL_ACTIVE & RW_MEM;
  
  mux21 #(.Width(8))
  	MUX_A(IN_A,0,RESET_TMP,A_WIRE);
  mux21 #(.Width(8))
  	MUX_B(IN_B,0,RESET_TMP,B_WIRE);
  mux21 #(.Width(4))
  	MUX_SEL(SEL,0,RESET_TMP,SELECT_WIRE);
  
  //ALU
  
  ALU alu(.A(A_WIRE), .B(B_WIRE), .SEL(SELECT_WIRE), .OUT(ALU_OUT_TMP), .FLAG(FLAG_TMP));
  
   //BUFFER
  
  BUFFER buffer(.a(A_WIRE), .b(B_WIRE), .c(ALU_OUT_TMP), .e(FLAG_TMP), .d(SELECT_WIRE), .out(BUFFER_OUT));
  
  //MUX AFTER BUFFER
  
  mux21 #(.Width(32))
  	MUX_BUFF_MEM(BUFFER_OUT,D_OUT_MEM,CTRL_MODE,MUX_BM_RES);
  
  //DEC_INPUT
  DEC_INPUT_KEY DEC_INPUT(.INPUT_KEY(INPUT_KEY), .CLK(CLK), .VALID_CMD(VALID_CMD), .RESET(RESET), .ACTIVE(CTRL_ACTIVE), .MODE(CTRL_MODE));
  
  //CONTROLLER
  
  CONTROL_RW_FLOW CONTROLLER(.VALID_CMD(VALID_CMD), .RW(RW_WIRE), .RESET(RESET), .CLK(CLK), .TX_DONE(TRANSFER_DONE), .ACTIVE(CTRL_ACTIVE),.MODE(CTRL_MODE), .ACCESS_MEM(CTRL_ACCESS_MEM), .RW_MEM(CTRL_RW_MEM), .PARALEL_LOAD(CTRL_SAMPLE_DATA), .TX_DATA(CTRL_TRANSFER_DATA), .BUSY(BUSY));
  
  //MEMORY
  
  MEMORY MEM(.Din(BUFFER_OUT), .Addr(ADDR), .RW(CTRL_RW_MEM), .Valid(CTRL_ACCESS_MEM), .Reset_TMP(RESET_TMP), .CLK(CLK), .D_OUT(D_OUT_MEM));
  
  
  //SHIFT_PARALEL
  Shift_Paralel_Load SHIFT_PARALEL_LOAD(.DIN(MUX_BM_RES), .PARALEL_LOAD(CTRL_SAMPLE_DATA), .START_TX(CTRL_TRANSFER_DATA), .RESET(RESET), .CLK(CLK), .CLK_TX(CLK_TX), .TX_DONE(TRANSFER_DONE), .TX_BUSY(DATAOUT_VLD), .SOUT(DOUT));
  
  
  //DIV_FRECV
  DIV_FRECVENTA FRECV(.DIN(D_IN), .CONFIG_DIV(CONFIG_DIV), .RESET(RESET_TMP), .CLK(CLK), .ENABLE(CTRL_TRANSFER_DATA), .CLK_OUT(CLK_TX));
  
endmodule

module mux21(D0, D1, S, Y);
  parameter Width = 8;
  input wire [Width-1:0] D0;
  input wire [Width-1:0] D1;
  input wire S;
  output reg [Width-1:0] Y;

  always @(D0 or D1 or S)
    begin
    if(S) 
      Y= D1;
    else
      Y=D0;
	end

endmodule

module Clock(output c);
  reg val;
  assign c = val;
  initial
    val = 0;
  always
    #5 val = ~val;
endmodule


module BUFFER(input [7:0]a, input [7:0]b, input [7:0]c, input [3:0]d, input [3:0]e, output reg [31:0]out);
  always @(*)
    begin
//       out[7:0]<=a;
//       out[15:8]<=b;
//       out[23:16]<=c;
//       out[27:24]<=d;
//       out[31:28]<=e;
      
      out = {e,d,c,b,a};
    end
endmodule
  

module ALU(input [7:0] A, 
           input [7:0] B, 
           input [3:0] SEL, 
           output reg [7:0] OUT, 
           output reg [3:0] FLAG);
  
  
  localparam SUM_OP 		= 4'h0;
  localparam SUB_OP			= 4'h1;
  localparam MUL_OP 		= 4'h2;
  localparam DIV_OP 		= 4'h3;
  localparam LSHIFT_OP  	= 4'h4;
  localparam RSHIFT_OP 		= 4'h5;
  localparam AND 			= 4'h6;
  localparam OR 			= 4'h7;
  localparam XOR 			= 4'h8;
  localparam NXOR 			= 4'h9;
  localparam NAND 			= 4'hA;
  localparam NOR 			= 4'hB;
  

  
  
  
  
  //FLAG [3:0]
  
  //0 -> ZeroFlag
  //1 -> CarryFlag
  //2 -> OverflowFlag
  //3 -> UnderflowFlag
  
    function inbetween(input low, input value, input high);
    begin
      if(value >= low && value <= high)
        inbetween = 1'b1;
      else
        inbetween = 1'b0;
    end
  endfunction
  
  always @(A, B, SEL) begin
    FLAG = 0;
    case(SEL) //inside

      
      //suma
      SUM_OP: begin
        {FLAG[2], OUT} = A + B;
        if(FLAG[2] == 4'b0) begin
        	OUT = A + B;
        end
        if(OUT == 8'h0)
          FLAG[3] = 1;
      end
      
      //dif
      SUB_OP: begin
        if(A >= B) begin
          OUT = A - B;
          FLAG[0] = 0;
        end
        else begin
          FLAG[0] = 1;
        end
        if(OUT == 8'h0)
          FLAG[0] = 1;
      end
      
      //inmultire
      MUL_OP: begin
        $display("mul");
        if(A > 8'hF || B > 8'hF) begin
          FLAG[1] = 1;
        end
        else begin
          OUT = A * B; 
        end
        if(OUT == 8'h0)
          FLAG[3] = 1;
      end

      //impartire
      DIV_OP: begin
        if(A >= B) begin
          OUT = A / B;
          FLAG[0] = 0;
        end
        else begin
          FLAG[0] = 1;
        end
        if(OUT == 8'h0)
          FLAG[3] = 1;
      end
      
      //pana aici merge bn
      
      //shift st
      LSHIFT_OP: begin
        $display("LEFT SHIFT");
        {FLAG[2], OUT} = A << B;
        if(OUT == 8'h0)
          FLAG[3] = 1;
      end
      
      
      //shift dr
      RSHIFT_OP: begin
        $display("RIGHT SHIFT");
        {OUT,FLAG[2]} = A >> B;
        {OUT} = A >> B;
        if(OUT == 8'h0)
          FLAG[3] = 1;
      end
      
      AND: begin
        $display("AND");
        OUT = A & B;
        if(OUT == 8'h0)
          FLAG[3] = 1;
      end
      
      OR: begin
        OUT = A | B;
        if(OUT == 8'h0)
          FLAG[3] = 1;
      end
      
      XOR: begin
        OUT = A ^ B;
        if(OUT == 8'h0)
          FLAG[3] = 1;
      end
      
      NXOR: begin
        OUT = A ~^ B;
        if(OUT == 8'h0)
          FLAG[3] = 1;
      end
      
      NAND: begin
        OUT = A ~& B;
        if(OUT == 8'h0)
          FLAG[3] = 1;
      end
      	
      NOR: begin
        OUT = A ~| B;
        if(OUT == 8'h0)
          FLAG[3] = 1;
      end
      
      default: begin
        $display("Nu stiu ce sa fac + val = %0b",SEL);
        OUT = 8'h00;
        FLAG = 4'h0;
      end
    endcase
  end
  
  
endmodule



module MEMORY #(parameter Width = 8)
  (input [31:0] Din, input [7:0] Addr, input RW, input Valid, input Reset_TMP, input CLK, output reg [31:0] D_OUT);
  
  localparam BLOCKED_MEM = 1'b0;
  localparam UNBLOCKED_MEM = 1'b1;
  
  localparam READ_MEM = 1'b0;
  localparam WRITE_MEM = 1'b1;
  
  reg [31:0] PREP;
  reg [31:0] DIN_COPY;
  reg [4:0] firstPositiveBit;
  
  integer index = 0;
  wire [Width-1:0] addrIndex;
  
  reg [31 : 0] myMem [2**Width - 1 : 0];
  
  always @(posedge CLK, posedge Reset_TMP) begin
    
    if(Reset_TMP) begin
      D_OUT = 32'b0;
    
      for(index = 0; index < 2**Width - 1; index = index + 1)
        myMem[index] = 0;

      end
    
    case(Valid)
      BLOCKED_MEM: begin
        //memoria nu poate fi accesata
      end
        
      UNBLOCKED_MEM: begin
        //memoria poate fi accessata
        case(RW)
            READ_MEM: begin
				//read Addr pus in Dout
              

              	D_OUT <= myMem[Addr];
            end
              
              
            WRITE_MEM: begin


              myMem[Addr] <= Din;
               $display("-----------FULL MEM-----------");
            for(addrIndex = 0; addrIndex< 2**Width - 1; addrIndex = addrIndex + 1) begin
              $display("addr=%0d ---> value = %0b", addrIndex, myMem[addrIndex]);
              end
            end
        endcase
      end
    endcase
  end
endmodule


module CONTROL_RW_FLOW(input VALID_CMD, input RW, input RESET, input CLK, input TX_DONE, input ACTIVE, input MODE, output reg ACCESS_MEM, output reg RW_MEM, output reg PARALEL_LOAD, output reg TX_DATA, output reg BUSY);
  
  localparam IDLE 	= 3'b000;
  localparam STATE1 = 3'b001;
  localparam STATE2 = 3'b010;
  localparam STATE3 = 3'b011;
  localparam STATE4 = 3'b100;
  localparam STATE5 = 3'b101;
  localparam STATE6 = 3'b110;
  
  
  reg [2:0] currentState = 3'b000;
  reg [2:0] nextState = 3'b000;

  //memorare stare curenta
  always @(posedge CLK, posedge RESET) begin
    if(RESET) begin
      currentState <= IDLE;
    end
    else
      currentState <=  nextState;
  end
  
  //generare stare urmatoare
  always @(VALID_CMD, RW, ACTIVE, MODE, TX_DONE, currentState) begin//
    $display("my current state = %0b", currentState);
    case(currentState)
      // {VALID_CMD,RW,ACTIVE,MODE,TX_DONE}
      IDLE: begin
        if(VALID_CMD == 1 && RW == 0 && ACTIVE == 1 && MODE == 1) begin
          nextState <= STATE1;
        end
        else if(VALID_CMD == 1 && ACTIVE == 1 && MODE == 0) begin
          nextState <= STATE5;
        end
        else if(VALID_CMD == 1 && RW == 1 && ACTIVE == 1 && MODE == 1) begin
        	nextState <= STATE4;
        end
        else begin
          nextState <= IDLE;
        end
      end
      
      STATE1: begin
        if(ACTIVE == 1 && MODE == 1) begin
          nextState <= STATE2;
        end
        else begin
          nextState <= IDLE;
        end
      end
      
      STATE2: begin
        if(ACTIVE == 1 && MODE == 1) begin
          nextState <= STATE3;
        end
        else begin
          nextState <= IDLE;
        end
      end
      
      STATE3: begin
        if(ACTIVE == 1 && MODE == 1 && TX_DONE == 0) begin
          nextState <= STATE3;
        end
        else begin
          nextState <= IDLE;
        end
      end
      
      STATE4: begin
        nextState = IDLE;
      end
      
      STATE5: begin
        if(ACTIVE == 1 && MODE == 0) begin
          nextState <= STATE6;
        end
        else begin
          nextState <= IDLE;
        end
      end
      
      STATE6: begin
        if(ACTIVE == 1 && MODE == 0 && TX_DONE == 0) begin
          nextState <= STATE6;
        end
        else begin
          nextState <= IDLE;
        end
      end
      
      default: begin
        nextState <= IDLE;
      end
    endcase
  end
  
  
  //generare output
  always @(currentState, RESET) begin
    if(currentState == IDLE) begin
      ACCESS_MEM = 0;
      RW_MEM = 0;
      PARALEL_LOAD = 0;
      TX_DATA = 0;
      BUSY = 0;
    end
    else if(currentState == STATE1) begin
      ACCESS_MEM = 1;
      RW_MEM = 0;
      PARALEL_LOAD = 0;
      TX_DATA = 0;
      BUSY = 1;
    end
    else if(currentState == STATE2) begin
      ACCESS_MEM = 0;
      RW_MEM = 0;
      PARALEL_LOAD = 1;
      TX_DATA = 0;
      BUSY = 1;
    end
    else if(currentState == STATE3) begin
      ACCESS_MEM = 0;
      RW_MEM = 0;
      PARALEL_LOAD = 0;
      TX_DATA = 1;
      BUSY = 1;
    end
    else if(currentState == STATE4) begin
      ACCESS_MEM = 1;
      RW_MEM = 1;
      PARALEL_LOAD = 0;
      TX_DATA = 0;
      BUSY = 0;
    end
    else if(currentState == STATE5) begin
      ACCESS_MEM = 0;
      RW_MEM = 0;
      PARALEL_LOAD = 1;
      TX_DATA = 0;
      BUSY = 1;
    end
    else if(currentState == STATE6) begin
      ACCESS_MEM = 0;
      RW_MEM = 0;
      PARALEL_LOAD = 0;    
      TX_DATA = 1;
      BUSY = 1;
    end
    
    
    if(RESET) begin
      ACCESS_MEM = 0;
      RW_MEM = 0;
      PARALEL_LOAD = 0;
      TX_DATA = 0;
      BUSY = 0;
    end
 end
  
endmodule




module Shift_Paralel_Load(input [31:0] DIN, input PARALEL_LOAD, input START_TX, input RESET, input CLK, input CLK_TX, output reg TX_DONE, output reg TX_BUSY, output reg SOUT);
  reg [4:0] index;
  reg [31:0] data;
  
  always @(posedge CLK, posedge RESET) begin
    if(RESET) begin
      TX_DONE <= 1'b0;
      TX_BUSY <= 1'b0;
      SOUT <= 1'b0;
      data <= 32'b0;
      index <= 0;
      TX_BUSY <= 0;
    end
    else if(CLK) begin
      if(PARALEL_LOAD && !START_TX)
      	data <= DIN;
    end
  end
  
  always @(posedge CLK_TX) begin
    if(!RESET && START_TX && data) begin
      if(!TX_BUSY)
      	TX_BUSY <= 1;
      SOUT <= data[index];
      $display("data = %0b", data[index]);
      index <= index + 1;
      if(index == 31) begin
        $display("INTRU");
        TX_BUSY <= 1'b0;
      end
    end
  end
  
endmodule


// D flip-flop
module DFlipFlop(input clk, input reset, input d, output q);
  reg q;
  always @(posedge clk or posedge reset)
  begin
    if (reset) begin
      // Asynchronous reset when reset goes high
      q <= 1'b0;
    end 
    else begin
      // Assign D to Q on positive clock edge
      q <= d;
    end
  end
endmodule


module DEC_INPUT_KEY(input INPUT_KEY, input VALID_CMD, input RESET, input CLK, output ACTIVE, output MODE);
  wire s0c, s1c, s2c, s0p, s1p, s2p;
  
  //reg [1:0] result;
  
  
  assign s2p = (VALID_CMD & !INPUT_KEY & !s2c & s1c & !s0c) | (VALID_CMD & s2c & s1c & !s0c) | (s2c & s0c);
  assign s1p = (VALID_CMD & !INPUT_KEY & !s2c & !s1c & s0c) | (VALID_CMD & INPUT_KEY & !s2c & s1c & s0c) | (VALID_CMD & !INPUT_KEY & s1c & !s0c) | (s2c & s1c & s0c);
  assign s0p = (VALID_CMD & INPUT_KEY & !s2c & !s1c & !s0c) | (VALID_CMD & !INPUT_KEY & !s2c & !s1c & s0c) | (VALID_CMD & s2c & s1c & !s0c) | (s2c & s0c);
  
  DFlipFlop A(CLK, RESET, s0p, s0c);
  DFlipFlop B(CLK, RESET, s1p, s1c);
  DFlipFlop C(CLK, RESET, s2p, s2c);
  
  assign MODE = s2c & !s1c & s0c;
  assign ACTIVE = s2c & s0c;
endmodule

module DIV_FRECVENTA(input [31:0] DIN, input CONFIG_DIV, input RESET, input CLK, input ENABLE, output CLK_OUT);
  reg [31:0] n;
  reg [31:0] counterPos = 0;
  reg [31:0] counterNeg = 0;
  
  always @(counterPos) begin
    if(counterPos == 1)
      counterNeg = 1;
  end
  
  always @(posedge CLK) begin
    if(RESET) begin
      n <= 1;
      counterPos <= 0;
    end
    else if(CLK) begin
      if(!ENABLE) begin
        if(!CONFIG_DIV) begin
          if (counterPos == n-1) 
            counterPos <= 0;
          else 
            counterPos<= counterPos +1;
          end
        else begin
          n <= DIN;
        end
      end
      else begin
        
        if (counterPos == n-1) 
          counterPos <= 0;
 		else 
          counterPos <= counterPos +1;
      end
    end
  end
  
  always @(negedge CLK) begin
    if (RESET)
     counterNeg <= 0;
    else  if (counterNeg == n-1) 
      counterNeg <= 0;
   	else 
      counterNeg<= counterNeg + 1;
  end
  
  assign CLK_OUT = n>1?(n%2==1?((counterPos > (n/2)) | (counterNeg > (n/2))):(counterPos<n/2)?1'b0:1'b1):CLK;

  //assign CLK_OUT = (counterPos<n/2)?1'b0:1'b1;

endmodule
